# Firmware configuration file for the HLK-7628N

require-fwup-version="0.16.0"  # For the execute()

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Nerves Firmware")
define(NERVES_FW_DESCRIPTION, "Nerves System - HLK-7628N")
define(NERVES_FW_VERSION, "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM, "hlk7628n")
define(NERVES_FW_ARCHITECTURE, "mips")
define(NERVES_FW_AUTHOR, "Yu Changeyuan")

define(NERVES_FW_DEVPATH, "/dev/mtdblock1")
define(NERVES_FW_APPLICATION_PART0_DEVPATH, "/dev/mtdblock7")
define(NERVES_FW_APPLICATION_PART0_FSTYPE, "jffs2")
define(NERVES_FW_APPLICATION_PART0_TARGET, "/root")
define(NERVES_PROVISIONING, "${NERVES_SYSTEM}/images/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")
define(KERNEL, "${NERVES_SYSTEM}/images/uImage")


# Storage for HLK-7628N is a 32MB NOR flash(erase block size 64K) with
# following layout:
#
# +-----------------------------+
# | uboot(mtd0, 192K)           |
# +-----------------------------+
# | uboot-env(mtd1, 64K)        |
# +-----------------------------+
# | factory(mtd2, 64K)          |
# +-----------------------------+
# | firmware | kernel(mtd4)     |
# | (mtd3)   +------------------+
# |          | root   |         |
# |          | (mtd5) +---------+
# |          |        |root_data|
# |          |        |(mtd6)   |
# +-----------------------------+
# | application(mtd7)           |
# +-----------------------------+
#
# 1st 192K is bootloader flashed by vendor, 2nd 64K is uboot-env partition,
# with size of 4K. 3rd 64K is factory partition, with some factory data
# inside. Both mtd0 & mtd2 is read-only.

# Next partition is firmware partition(mtd3):
#
# An uImage kernel should be placed kernel at the beginning, address 0x50000
# is hard encoding in bootloader and is not changable.
#
# With OpenWrt mtd-split patch, this partition(mtd3) will split to
# kernel(mtd4), root(mtd5) and root_data(mtd6). We copy part of mtd5 to tmpfs
# in initramfs, and mount as root, we do not use mtd6
#
# Last partition is application(mtd7) partition, which reserved for read-write
# data, and should mount at "/root"


# NOTE, here we use /dev/mtdblock1 as target device, which contains u-boot-env
# for rootfs, we use "flashcp" command to do actual update
define(UBOOT_ENV_OFFSET, 0)
define(UBOOT_ENV_COUNT,  8)  # 4 KB

define(ROOTFS_MTD, "mtd3")
define(ROOTFS_FW, "firmware.bin")
define(ROOTFS_COUNT, 40320) # 0x1400000 - 0x50000 = 0x13b0000

define(TMPFS_DIR, "/tmp/fwup")
define(ROOTFS_FW_PATH, "${TMPFS_DIR}/${ROOTFS_FW}")

define(UBOOT_ENV_TXT, "${TMPFS_DIR}/uboot-env.txt")

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.


file-resource firmware.bin {
  # Concatenate uImage and the rootfs. OpenWRT mtd splitter will
  # separate them back out at runtime.
  host-path = "${KERNEL};${ROOTFS}"
  assert-size-lte = ${ROOTFS_COUNT}
}

file-resource uboot-env.txt {
    contents = "\
a.nerves_fw_application_part0_devpath ${NERVES_FW_APPLICATION_PART0_DEVPATH}\n\
a.nerves_fw_application_part0_fstype  ${NERVES_FW_APPLICATION_PART0_FSTYPE}\n\
a.nerves_fw_application_part0_target  ${NERVES_FW_APPLICATION_PART0_TARGET}\n\
a.nerves_fw_product ${NERVES_FW_PRODUCT}\n\
a.nerves_fw_description ${NERVES_FW_DESCRIPTION}\n\
a.nerves_fw_version ${NERVES_FW_VERSION}\n\
a.nerves_fw_platform ${NERVES_FW_PLATFORM}\n\
a.nerves_fw_architecture ${NERVES_FW_ARCHITECTURE}\n\
a.nerves_fw_author ${NERVES_FW_AUTHOR}\n\
a.nerves_fw_vcs_identifier ${NERVES_FW_VCS_IDENTIFIER}\n\
a.nerves_fw_misc ${NERVES_FW_MISC}\n\

# we only have firmware 'A'\n\
nerves_fw_active a\n\
"
}

# location of u-boot-env, we must run "fwup" command with option
# "-d /dev/mtdblock1"
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task generate a firmware.bin which can be used to flash via tftp
task complete {
    on-init {
    }

    on-resource firmware.bin {
        # write kernel with appended rootfs
        raw_write(0)
    }

    on-finish {
        info("Please manually set u-boot env with below commands after first flash the firmware:")
        info("fw_setenv nerves_fw_active a")
        info("fw_setenv nerves_fw_devpath ${NERVES_FW_DEVPATH}")
        info("fw_setenv a.nerves_fw_platform ${NERVES_FW_PLATFORM}")
        info("fw_setenv a.nerves_fw_architecture ${NERVES_FW_ARCHITECTURE}")
        info("")
        info("And setup 'nerves_serial_number' when necessary")
        info("fw_setenv nerves_serial_number \${NERVES_SERIAL_NUMBER}")
    }
}

task upgrade.a {
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A, copy firmware to tmpfs")

        execute("mkdir -p ${TMPFS_DIR}")
        execute("mount -t tmpfs none ${TMPFS_DIR}") # here assume tmpfs size is big enough
    }

    # Write the new kernel & rootfs
    on-resource firmware.bin {
        path_write(${ROOTFS_FW_PATH})
    }

    on-resource uboot-env.txt {
        path_write(${UBOOT_ENV_TXT})
    }

    on-finish {
        info("Flash ${ROOTFS_MTD} with ${ROOTFS_FW_PATH}")
        execute("flashcp -v ${ROOTFS_FW_PATH} /dev/${ROOTFS_MTD}")

        # Update firmware metadata
        # uboot_setenv can actual write uboot env var to mtdblock device,
        # but will report "write failed at offset 0. Check media size." error,
        # so here we use fw_setenv
        info("Setup u-boot-env")
        execute("fw_setenv -s ${UBOOT_ENV_TXT}")
        execute("fw_setenv a.nerves_fw_uuid \${FWUP_META_UUID}")

        info("Clear up")
        execute("rm ${TMPFS_DIR}/*")
        execute("umount ${TMPFS_DIR}")
    }

    on-error {
        info("Error, clear up")
        execute("rm ${TMPFS_DIR}/*")
        execute("umount ${TMPFS_DIR}")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${NERVES_FW_PLATFORM} and architecture=${NERVES_FW_ARCHITECTURE}")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        include("${NERVES_PROVISIONING}")
    }
}

task provision.wrongplatform {
    on-init {
        error("Expecting platform=${NERVES_FW_PLATFORM} and architecture=${NERVES_FW_ARCHITECTURE}")
    }
}
